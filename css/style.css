[class*="container"] {
    height: 300px;
    width: 600px;
    border: 1px solid #333;
    margin: 20px;
    display: grid;
}


/**
 * Grids with specific positioning
 */
.container1 {
    grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];
    grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];
}

.item-a {
    background-color: pink;

    /* grid-column-start: 2;
    grid-column-end: five;
    grid-row-start: row1-start;
    grid-row-end: 3; */

    /* short-hand for grid-column start/end */
    /* short-hand for grid-row start/end */
    grid-column: 2 / five;
    grid-row: row1-start / 3;
}

.item-b {
    background-color: rgba(0, 0, 0, 0.3);

    grid-column-start: 1;
    grid-column-end: span col4-start;
    grid-row-start: 2;
    grid-row-end: span 2;

    /* short-hand for grid-column start/end */
    /* short-hand for grid-row start/end */
    grid-column: 1 / span col4-start;
    grid-row: 2 / span 2;
}

.item-c {
    background-color: orange;
}


/**
 * Grids without specific positioning
 */
.container2 {
    grid-template-columns: repeat(3, 1fr); /* 1fr 1fr 1fr */
    grid-template-rows: auto; /* default value */
    
    /* row-gap: 15px;
    column-gap: 10px; */
    /* short-hand */
    gap: 15px 10px; /* <grid-row-gap> <grid-column-gap>; */

    padding: 10px;


    align-items: stretch; /* start | end | center | stretch (default) */
    justify-items: center; /* start | end | center | stretch (default) */
    /* short-hand */
    place-items: stretch stretch; /* <align-items> <justify-items> */


    /* Needs free available space to move around */
    /* Positions column-wise */
    justify-content: space-between; /* start | end | center | stretch (default) | space-around | space-between | space-evenly;*/
    /* Positions row-wise */
    align-content: space-evenly;/* start | end | center | stretch | space-around | space-between | space-evenly;*/
    /* short-hand */
    place-content: stretch stretch; /* <align-content> <justify-content> */
}

[class*="box"] {
    border: 1px solid #333;
}

.box5 {
    align-self: center; /* start | end | center | stretch (default) */
    justify-self: center; /* start | end | center | stretch (default) */
    /* short-hand */
    place-self: center center; /* <align-self> <justify-self> */
}


/**
 * Grid areas
 */


.container3 {
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: auto; /* default value */

    /*
        To think about when working with grid areas
        1. All children need to begiven a grid-area name
        2. All children need to be positioned positioned in grid-template-areas
        3. The elements must be a square or rectangle, meaning must have 4 corners, or else the layout will collapse
        4. Single elements/sections need to be in one piece. Must remain a single section in the layout
        5. All rows must have same number of cells
    */
    grid-template-areas: 
        "header header header sidebar"
        "content content . sidebar"
        "footer footer footer sidebar";
    
    /* 
        When assigning only 1 value (instead of 2), 
        the value applies for both column and row gap 
    */
    gap: 10px; 
}

header {
    background-color: tomato;
    grid-area: header;
}

main {
    background-color: wheat;
    grid-area: content;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
}

aside {
    background-color: lightcyan;
    grid-area: sidebar;
}

footer {
    background-color: lightskyblue;
    grid-area: footer;
}
